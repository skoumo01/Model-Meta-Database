swagger: "2.0"
info:
  description: "This is the documentation for the meta-database intented for model storing and querying as implemented at [Model-Meta-Database](https://github.com/skoumo01/Model-Meta-Database).
  
  
    Note: For the following endpoints the (valid) token 'token' can be used. This is for demonstration purposes only."
  version: "1.0.0"
  title: "Model Meta-Database"
  contact:
    email: "skoumo01@ucy.ac.cy"
host: "localhost:3000"
basePath: "/"
tags:
- name: "model"
  description: "Create/Update/Delete/Cleanup a single model"
- name: "metadata"
  description: "Query model metadata"
schemes:
- "http"
paths:
  /model:
    get:
      tags:
      - "model"
      summary: "Retrieve a model"
      description: ""
      operationId: "model"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "The client's blockchain authentication/authorization token."
        required: true
        type: "string"
      - name: "id"
        in: "query"
        description: "The model's ID. e.g. 'id_0'"
        required: true
        type: "string"
      responses:
        "200":
          description: "Successfully retrieved model from blockchain."
          schema:
            $ref: "#/definitions/Data"
        "400":
          description: "Bad Request; one or more of the required properties/parameters have not been provided."
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "401":
          description: "Unauthorized action. The provided client token was checked and deemed invalid."
          schema:
            $ref: "#/definitions/AuthorizationErrorResponse"
        "404":
          description: "Model not found. This means that there was no previous attempt to submit a model with this specific ID."
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Internal Server Error."
          schema:
            $ref: "#/definitions/InternalServerResponse"
  /model/submit:
    put:
      tags:
      - "model"
      schemes:
      - "http"
      summary: "Create or update a model"
      description: "Overwrites the model with the provided ID on the blockchain. If the model does not already exist, it creates a new one."
      operationId: "model_submit"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The model data to be submitted."
        required: true
        schema:
          $ref: "#/definitions/Submission"
      responses:
        "200":
          description: "Successfully submitted transaction to blockchain. This does not guarantee that the model has been committed on the blockchain; the transaction has just been successfully send for evaluation by the blockchain network. Returns no error if the provided token is invalid; must use the model/submit/check endpoint to find out about the result of the submission transaction."
          schema:
            $ref: "#/definitions/OkResponse"
        "400":
          description: "Bad Request; one or more of the required json properties/parameters have not been provided."
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "500":
          description: "Internal Server Error."
          schema:
            $ref: "#/definitions/InternalServerResponse"
  /model/submit/check:
    get:
      tags:
      - "model"
      summary: "Check the status of a model submission transaction"
      description: "Returns a submission transaction status"
      operationId: "model_submit_check"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "The client's blockchain authentication/authorization token."
        required: true
        type: "string"
      - name: "id"
        in: "query"
        description: "The model's ID. e.g. 'id_0'"
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful Operation."
          schema:
            $ref: "#/definitions/Status"
        "400":
          description: "Bad Request; one or more of the required properties/parameters have not been provided."
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "401":
          description: "Unauthorized action. The provided client token was checked and deemed invalid."
          schema:
            $ref: "#/definitions/AuthorizationErrorResponse"
        "404":
          description: "Model not found. This means that there was no previous attempt to submit a model with this specific ID."
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Internal Server Error."
          schema:
            $ref: "#/definitions/InternalServerResponse"
  /model/delete:
    get:
      tags:
      - "model"
      summary: "Delete a model"
      description: "Issues multiple delete transactions to remove a model form the World State. If a model has shrunk in size over time (i.e. submission N+i had less model data than submission N, i>0), it is possible that data belonging to the old model are still left on the blockchain, but cannot be accessed via the data retrieving endpoints; use the model/cleanup endpoint to remove such data. Additionally, this endpoint does not implement transaction logic; if a delete transaction fails and others succeed, the World State is left in a corrupted state. A corrupted state only affects model retrieval; use the model/cleanup endpoint to remove the corrupted data, or submit a new model with the same ID to the blockchain (i.e. overwrite)."
      operationId: "model_delete"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "The client's blockchain authentication/authorization token."
        required: true
        type: "string"
      - name: "id"
        in: "query"
        description: "The model's ID. e.g. 'id_0'"
        required: true
        type: "string"
      responses:
        "200":
          description: "Successfully submitted the necessary delete transactions to blockchain. This does not guarantee that the model has been deleted from the blockchain; the transactions have just been successfully send for evaluation by the blockchain network.Use the model/delete/check endpoint to find out about the result of the delete transaction."
          schema:
            $ref: "#/definitions/OkResponse"
        "400":
          description: "Bad Request; one or more of the required properties/parameters have not been provided."
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "401":
          description: "Unauthorized action. The provided client token was checked and deemed invalid."
          schema:
            $ref: "#/definitions/AuthorizationErrorResponse"
        "404":
          description: "Model not found."
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Internal Server Error."
          schema:
            $ref: "#/definitions/InternalServerResponse"
  /model/delete/check:
    get:
      tags:
      - "model"
      summary: "Check the status of a model delete transaction"
      description: "Returns a delete transaction's status"
      operationId: "model_delete_check"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "The client's blockchain authentication/authorization token."
        required: true
        type: "string"
      - name: "id"
        in: "query"
        description: "The model's ID. e.g. 'id_0'"
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful Operation."
          schema:
            $ref: "#/definitions/Status"
        "400":
          description: "Bad Request; one or more of the required properties/parameters have not been provided."
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "401":
          description: "Unauthorized action. The provided client token was checked and deemed invalid."
          schema:
            $ref: "#/definitions/AuthorizationErrorResponse"
        "404":
          description: "No delete attempt for the requested model has been issued."
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Internal Server Error."
          schema:
            $ref: "#/definitions/InternalServerResponse"
  /model/cleanup:
    get:
      tags:
      - "model"
      summary: "Clean up a model"
      description: "Removes unreachable data from the blockchain for a specific model ID."
      operationId: "model_cleanup"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "The client's blockchain authentication/authorization token."
        required: true
        type: "string"
      - name: "id"
        in: "query"
        description: "The model's ID. e.g. 'id_0'"
        required: true
        type: "string"
      responses:
        "200":
          description: "Successfully submitted the necessary delete transactions to blockchain. This does not guarantee that the model has been successfully cleaned up; the transactions have just been successfully send for evaluation by the blockchain network. Use the model/cleanup/check endpoint to find out about the result of the delete transaction. If that endpoint fails, simply continue issuing requests to this endpoint until the model gets cleaned up."
          schema:
            $ref: "#/definitions/OkResponse"
        "400":
          description: "Bad Request; one or more of the required properties/parameters have not been provided."
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "401":
          description: "Unauthorized action. The provided client token was checked and deemed invalid."
          schema:
            $ref: "#/definitions/AuthorizationErrorResponse"
        "404":
          description: "Model not found."
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Internal Server Error."
          schema:
            $ref: "#/definitions/InternalServerResponse"
  /model/cleanup/check:
    get:
      tags:
      - "model"
      summary: "Check the status of a model cleanup transaction"
      description: "Returns a cleanup transaction's status"
      operationId: "model_cleanup_check"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "The client's blockchain authentication/authorization token."
        required: true
        type: "string"
      - name: "id"
        in: "query"
        description: "The model's ID. e.g. 'id_0'"
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful Operation."
          schema:
            $ref: "#/definitions/Status"
        "400":
          description: "Bad Request; one or more of the required properties/parameters have not been provided."
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "401":
          description: "Unauthorized action. The provided client token was checked and deemed invalid."
          schema:
            $ref: "#/definitions/AuthorizationErrorResponse"
        "404":
          description: "No cleanup attempt for the requested model has been issued."
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Internal Server Error."
          schema:
            $ref: "#/definitions/InternalServerResponse"
  /metadata:
    get:
      tags:
      - "metadata"
      summary: "Query the metadata of a specific model"
      description: ""
      operationId: "latestModelMetadata"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "The client's blockchain authentication/authorization token."
        required: true
        type: "string"
      - name: "id"
        in: "query"
        description: "The model's ID. e.g. 'id_0'"
        required: true
        type: "string"
      responses:
        "200":
          description: "Successfully retrieved metadata from blockchain."
          schema:
            $ref: "#/definitions/Metadata"
        "400":
          description: "Bad Request; one or more of the required properties have not been provided."
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "401":
          description: "Unauthorized action. The provided client token was checked and deemed invalid."
          schema:
            $ref: "#/definitions/AuthorizationErrorResponse"
        "404":
          description: "Model not found. This means that there was no previous attempt to submit a model with this specific ID."
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Internal Server Error."
          schema:
            $ref: "#/definitions/InternalServerResponse"
  /metadata/tags:
    get:
      tags:
      - "metadata"
      summary: "Query the metadata of the models with these 2 tags"
      description: ""
      operationId: "tagsQuery"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "The client's blockchain authentication/authorization token."
        required: true
        type: "string"
      - name: "page_size"
        in: "query"
        description: "The max number of metadata entries to retrieve"
        required: true
        type: "string"
      - name: "bookmark"
        in: "query"
        description: "The query bookmark to use. The provided bookmark determines which query-result page to retrieve. e.g. To retrieve all the data in a result set of 10 metadata entries using page_size=3 the user needs to initially provide an empty bookmark ('' or \"\"), and (in subsequent calls) the bookmark string returned by the previous call to this endpoint; a total of 4 calls for this example."
        required: true
        type: "string"
      - name: "tag1"
        in: "query"
        description: "The desired value for the tag1 query field"
        required: true
        type: "string"
      - name: "tag2"
        in: "query"
        description: "The desired value for the tag2 query field"
        required: true
        type: "string"
      responses:
        "200":
          description: "The tag query has been successfully carried out."
          schema:
            $ref: "#/definitions/QueryResults"
        "400":
          description: "Bad Request; one or more of the required properties have not been provided."
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "401":
          description: "Unauthorized action. The provided client token was checked and deemed invalid."
          schema:
            $ref: "#/definitions/AuthorizationErrorResponse"
        "500":
          description: "Internal Server Error: Failed to execute tag query."
          schema:
            $ref: "#/definitions/InternalServerResponse"
  /metadata/tags/tag1:
    get:
      tags:
      - "metadata"
      summary: "Query the metadata of the models with a specific tag1"
      description: ""
      operationId: "tag1Query"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "The client's blockchain authentication/authorization token."
        required: true
        type: "string"
      - name: "page_size"
        in: "query"
        description: "The max number of metadata entries to retrieve"
        required: true
        type: "string"
      - name: "bookmark"
        in: "query"
        description: "The query bookmark to use. The provided bookmark determines which query-result page to retrieve. e.g. To retrieve all the data in a result set of 10 10 metadata entries using page_size=3 the user needs to initially provide an empty bookmark ('' or \"\"), and (in subsequent calls) the bookmark string returned by the previous call to this endpoint; a total of 4 calls for this example."
        required: true
        type: "string"
      - name: "tag1"
        in: "query"
        description: "The desired value for the tag1 query field"
        required: true
        type: "string"
      responses:
        "200":
          description: "The tag query has been successfully carried out."
          schema:
            $ref: "#/definitions/QueryResults"
        "400":
          description: "Bad Request; one or more of the required properties have not been provided."
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "401":
          description: "Unauthorized action. The provided client token was checked and deemed invalid."
          schema:
            $ref: "#/definitions/AuthorizationErrorResponse"
        "500":
          description: "Internal Server Error: Failed to execute tag query."
          schema:
            $ref: "#/definitions/InternalServerResponse"
  /metadata/tags/tag2:
    get:
      tags:
      - "metadata"
      summary: "Query the metadata of the models with a specific tag2"
      description: ""
      operationId: "tag2Query"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "The client's blockchain authentication/authorization token."
        required: true
        type: "string"
      - name: "page_size"
        in: "query"
        description: "The max number of metadata entries to retrieve"
        required: true
        type: "string"
      - name: "bookmark"
        in: "query"
        description: "The query bookmark to use. The provided bookmark determines which query-result page to retrieve. e.g. To retrieve all the data in a result set of 10 10 metadata entries using page_size=3 the user needs to initially provide an empty bookmark ('' or \"\"), and (in subsequent calls) the bookmark string returned by the previous call to this endpoint; a total of 4 calls for this example."
        required: true
        type: "string"
      - name: "tag2"
        in: "query"
        description: "The desired value for the tag2 query field"
        required: true
        type: "string"
      responses:
        "200":
          description: "The tag query has been successfully carried out."
          schema:
            $ref: "#/definitions/QueryResults"
        "400":
          description: "Bad Request; one or more of the required properties have not been provided."
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "401":
          description: "Unauthorized action. The provided client token was checked and deemed invalid."
          schema:
            $ref: "#/definitions/AuthorizationErrorResponse"
        "500":
          description: "Internal Server Error: Failed to execute tag query."
          schema:
            $ref: "#/definitions/InternalServerResponse"
definitions:
  Submission:
    type: "object"
    required:
    - "organization"
    - "user"
    - "peername"
    - "channel"
    - "contract"
    - "model"
    properties:
      token:
        type: "string"
        example: "token"
      data:
        $ref: "#/definitions/DataWrapper"
  OkResponse:
    type: "object"
    properties:
      message:
        type: "string"
    example:
      message: "OK"
  BadRequestResponse:
    type: "object"
    properties:
      message:
        type: "string"
    example:
      message: "Bad Request Error."
  NotFoundResponse:
    type: "object"
    properties:
      message:
        type: "string"
    example:
      message: "Not Found."
  InternalServerResponse:
    type: "object"
    properties:
      message:
        type: "string"
    example:
      message: "Internal Server Error."
  AuthorizationErrorResponse:
    type: "object"
    properties:
      message:
        type: "string"
    example:
      message: "Unauthorized."
  Status:
    type: "object"
    properties:
      is_completed:
        type: "string"
        enum: [true, false]
        description: >
          :
           * `true` - Transaction complete
           * `false` - Transaction incomplete
      status:
        type: "string"
        enum: [VALID, INVALID, PENDING, ERROR, UNAUTHORIZED]
        description: >
          status order:
           * `VALID` - The model has been successfully been committed to the blockchain.
           * `CORRUPTED` - Blockchain peers rejected the delete transaction even though client token was valid. The World State database is in a corrupted state, because the delete operation was unsuccessful.
           * `FAILED` - Clean up operation was unsuccessful.
           * `PENDING` - Transaction still in progress.
           * `ERROR` - Internal Server Error failure.
           * `UNAUTHORIZED` - The provided token was invalid; unauthorized client.
    example:
      is_completed: "true"
      status: "VALID"
  QueryResults:
    type: "object"
    properties:
      records:
        type: "array"
        items:
          type: "object"
          $ref: "#/definitions/Metadata"
      fetchedRecordsCount:
        type: "integer"
        example: 3
      bookmark:
        type: "string"
        example: ""
  GenericFile:
    type: "object"
    properties:
      metadata:
        type: "object"
        properties:
          identifier:
            type: "string"
          original_format:
            type: "string"
      serialized_data:
        type: "string"
        example: "string"
  Data:
    type: "object"
    properties:
      tag1:
        type: "string"
        example: "tag1"
      tag2:
        type: "string"
        example: "tag2"
      serialization_encoding:
        type: "string"
        example: "base64"
      model:
        type: "array"
        items:
          $ref: "#/definitions/GenericFile"
      weights:
        type: "array"
        items:
          $ref: "#/definitions/GenericFile"
      initialization:
        type: "array"
        items:
          $ref: "#/definitions/GenericFile"
        example: []
      checkpoints:
        type: "array"
        items:
          $ref: "#/definitions/GenericFile"
        example: []
  DataWrapper:
    type: "object"
    properties:
      id:
        type: "string"
        example: "id_0"
      tag1:
        type: "string"
        example: "tag1"
      tag2:
        type: "string"
        example: "tag2"
      serialization_encoding:
        type: "string"
        example: "base64"
      model:
        type: "array"
        items:
          $ref: "#/definitions/GenericFile"
      weights:
        type: "array"
        items:
          $ref: "#/definitions/GenericFile"
      initialization:
        type: "array"
        items:
          $ref: "#/definitions/GenericFile"
        example: []
      checkpoints:
        type: "array"
        items:
          $ref: "#/definitions/GenericFile"
        example: []
  Metadata:
    type: "object"
    properties:
      model_id:
        type: "string"
        example: "id_0"
      tag1:
        type: "string"
        example: "tag1"
      tag2:
        type: "string"
        example: "tag2"
      serialization_encoding:
        type: "string"
        example: "base64"
      page_number:
        type: "integer"
        example: 5
        description: "The number of pages into which the model is split on the blockchain. The number of pages equals the number of valid blockchain ledger entries that exist for the corresponding data."